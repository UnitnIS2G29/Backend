{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0",
    "title": "Gruppo 29 Unitn IS2"
  },
  "paths": {
    "/": {
      "get": {
        "description": "Get test",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200Response"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "description": "Returns all categories",
        "responses": {
          "200": {
            "description": "categories response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404Response"
          },
          "500": {
            "$ref": "#/components/responses/500Response"
          }
        }
      },
      "post": {
        "description": "Add a new category",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "sussesfully added category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400Response"
          },
          "401": {
            "$ref": "#/components/responses/401Response"
          },
          "500": {
            "$ref": "#/components/responses/500Response"
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "description": "Get category from id",
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404Response"
          },
          "500": {
            "$ref": "#/components/responses/500Response"
          }
        }
      },
      "put": {
        "description": "Update a category",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/categoriesBodyRes"
        },
        "responses": {
          "200": {
            "description": "Category update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400Response"
          },
          "401": {
            "$ref": "#/components/responses/401Response"
          },
          "404": {
            "$ref": "#/components/responses/404Response"
          },
          "500": {
            "$ref": "#/components/responses/500Response"
          }
        }
      },
      "delete": {
        "description": "Delete a category",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Category update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401Response"
          },
          "404": {
            "$ref": "#/components/responses/404Response"
          },
          "500": {
            "$ref": "#/components/responses/500Response"
          }
        }
      }
    },
    "/timers": {
      "get": {
        "summary": "Get list of user timers",
        "description": "Get the list of user timers",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Timer Objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Timer"
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500Response"
          }
        }
      },
      "post": {
        "summary": "Manually add a user timer",
        "description": "Manually add a user timer",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Timer Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Timer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timer object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timer"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500Response"
          }
        }
      }
    },
    "/timers/self": {
      "get": {
        "summary": "Get informations about running user timer",
        "description": "Get informations about the currently running timer of a user.<br>If no timer is running, response will be NULL",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Timer object or Null",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Timer"
                    },
                    {
                      "$ref": "#/components/schemas/Empty"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500Response"
          }
        }
      },
      "put": {
        "summary": "Edit the current running timer",
        "description": "Edit the currently running timer",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Timer Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Timer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timer object",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Timer"
                    },
                    {
                      "$ref": "#/components/schemas/Empty"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500Response"
          }
        }
      },
      "delete": {
        "summary": "Delete the currently running timer",
        "description": "Delete the currently running timer",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "$ref": "#/components/responses/500Response"
          }
        }
      },
      "post": {
        "summary": "Start a new user timer",
        "description": "Start a new user timer.<br>If there is a running timer, automatically stop the preceding one",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Timer Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Timer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timer object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timer"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500Response"
          }
        }
      },
      "patch": {
        "summary": "Stop the current user timer",
        "description": "Stop the current running timer",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "$ref": "#/components/responses/500Response"
          }
        }
      }
    },
    "/timers/{id}": {
      "get": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "summary": "Get informations about a specific timer",
        "description": "Get informations about a specific timer",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Timer object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timer"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404Response"
          },
          "500": {
            "$ref": "#/components/responses/500Response"
          }
        }
      },
      "put": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "summary": "Edit a user Timer",
        "description": "Edit a user timer by given ID.<br>Change start time, end time, category, description",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Timer Body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Timer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timer object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timer"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404Response"
          },
          "500": {
            "$ref": "#/components/responses/500Response"
          }
        }
      },
      "delete": {
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "summary": "Delete a user Timer",
        "description": "Delete a user timer by given ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfull Request"
          },
          "404": {
            "$ref": "#/components/responses/404Response"
          },
          "500": {
            "$ref": "#/components/responses/500Response"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "200Response": {
        "description": "Successful Request"
      },
      "400Response": {
        "description": "Bad Request"
      },
      "404Response": {
        "description": "Not Found"
      },
      "401Response": {
        "description": "Unauthorized (Unauthenticated)"
      },
      "403Response": {
        "description": "Forbidden"
      },
      "500Response": {
        "description": "Server error",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string"
            },
            "example": "Internal Server Error #2"
          }
        }
      }
    },
    "parameters": {
      "id": {
        "name": "id",
        "in": "query",
        "description": "resource id",
        "required": true,
        "schema": {
          "type": "integer"
        }
      }
    },
    "requestBodies": {
      "categoriesBodyRes": {
        "description": "category body",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Category"
            }
          }
        }
      }
    },
    "schemas": {
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Timer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Auto-incremental id"
          },
          "started_at": {
            "type": "string",
            "description": "Start time of the timer"
          },
          "stopped_at": {
            "type": "string",
            "description": "Stop time of the timer. Can be null if timer is running"
          },
          "category": {
            "$ref": "#/components/schemas/Category",
            "description": "Category of the clocked event"
          },
          "description": {
            "type": "string",
            "description": "Description of the clocked event"
          }
        }
      },
      "Empty": {
        "nullable": true
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}

